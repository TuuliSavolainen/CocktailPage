{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HandleSubList = _ref => {\n  let {\n    subtype,\n    selectedIngridients,\n    changeSelectedIngridient,\n    findIndex\n  } = _ref;\n\n  const openList = subtype => {\n    let list = [];\n\n    for (const ing in subtype) {\n      list = list.concat(subtype[ing].name);\n    }\n\n    return list;\n  };\n\n  let list = openList(subtype);\n\n  const handleSelection = (subtype, item) => {\n    for (const n in subtype) {\n      if (subtype[n].name === item) {\n        const index = subtype[n].index;\n        changeSelectedIngridient(index);\n      }\n    }\n  };\n\n  console.log(selectedIngridients);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: list.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"check-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: `custom-checkbox-${index}`,\n          name: item,\n          value: item,\n          checked: selectedIngridients[findIndex()],\n          onChange: () => handleSelection(subtype, item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `custom-checkbox-${index}`,\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HandleSubList;\n\nconst ShowSelectedIng = _ref2 => {\n  let {\n    selectedIngridients,\n    findIndex\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Selected Ingridients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = ShowSelectedIng;\n\nconst Checkboxes = _ref3 => {\n  let {\n    ingridients,\n    selectedIngridients,\n    changeSelectedIngridient\n  } = _ref3;\n\n  const findIndex = (subtype, item) => {\n    for (const n in subtype) {\n      if (subtype[n].name === item) {\n        return subtype[n].index;\n      }\n    }\n  };\n\n  const createLists = () => {\n    return Object.keys(ingridients).map((type, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-group\",\n          children: [type, /*#__PURE__*/_jsxDEV(HandleSubList, {\n            subtype: ingridients[type],\n            selectedIngridients: selectedIngridients,\n            changeSelectedIngridient: changeSelectedIngridient,\n            findIndex: findIndex()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(ShowSelectedIng, {\n            selectedIngridients: selectedIngridients,\n            findIndex: findIndex()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), createLists()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }, this);\n};\n\n_c3 = Checkboxes;\nexport default Checkboxes;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"HandleSubList\");\n$RefreshReg$(_c2, \"ShowSelectedIng\");\n$RefreshReg$(_c3, \"Checkboxes\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js"],"names":["HandleSubList","subtype","selectedIngridients","changeSelectedIngridient","findIndex","openList","list","ing","concat","name","handleSelection","item","n","index","console","log","map","ShowSelectedIng","Checkboxes","ingridients","createLists","Object","keys","type"],"mappings":"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","sourcesContent":["\nconst HandleSubList = ({subtype, selectedIngridients, changeSelectedIngridient, findIndex}) => {\n    \n    const openList = (subtype) => {\n        let list = []\n        for (const ing in subtype){\n            list = list.concat(subtype[ing].name)\n        }\n        return list\n    }\n    let list = openList(subtype)\n\n    const handleSelection = (subtype, item) => {\n        for (const n in subtype){\n            if (subtype[n].name === item){\n                const index = subtype[n].index\n                changeSelectedIngridient(index)\n            }\n        }\n    }\n    console.log(selectedIngridients)\n\n    return(\n        <div>\n            {list.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                      checked={selectedIngridients[findIndex()]}\n                      onChange={() => handleSelection(subtype, item)}\n                      />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            );\n          })}\n\n        </div>\n    )\n}\n\nconst ShowSelectedIng = ({selectedIngridients, findIndex}) => {\n    return(\n        <div>\n            <h2>\n                Selected Ingridients\n            </h2>\n        </div>\n    )\n}\n\nconst Checkboxes = ({ingridients, selectedIngridients, changeSelectedIngridient}) => {\n\n    const findIndex = (subtype, item) => {\n        for (const n in subtype){\n            if (subtype[n].name === item){\n                return subtype[n].index\n            }\n        }\n    }\n\n    const createLists = () =>{\n        return(\n            Object.keys(ingridients).map((type, index) => {\n                return(\n                    <>\n                        <div className = \"checkbox-group\" key = {index}>\n                            {type}\n                            <HandleSubList subtype = {ingridients[type]} selectedIngridients = {selectedIngridients} changeSelectedIngridient = {changeSelectedIngridient} findIndex = {findIndex()}/>\n                        </div>\n                        <div>\n                            <ShowSelectedIng selectedIngridients = {selectedIngridients} findIndex={findIndex()}/>\n                        </div>\n                    </>\n            )})\n        )\n    }\n\n    return (\n      <div>\n        <h3>Select Toppings</h3>\n        {createLists()}\n      </div>\n    );\n  }\n\nexport default Checkboxes"]},"metadata":{},"sourceType":"module"}