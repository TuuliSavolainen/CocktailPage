{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/cocktail/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkboxes = _ref => {\n  _s();\n\n  let {\n    removeIngridient,\n    addIngridient,\n    ingridients,\n    checkedIngridients,\n    setSelectedIngriedients,\n    selectedIngridients\n  } = _ref;\n  const [checkedState, setCheckedState] = useState(new Array(ingridients.length).fill(false));\n\n  const handleOnChange = position => {\n    const updatedCheckedState = checkedState.map((item, index) => index === position ? !item : item);\n    setCheckedState(updatedCheckedState);\n    console.log(updatedCheckedState[position]);\n\n    if (updatedCheckedState[position] === true) {\n      addIngridient(ingridients[position]);\n    } else {\n      removeIngridient(ingridients[position]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: ingridients.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: `custom-checkbox-${index}`,\n                name: item,\n                value: item,\n                checked: checkedState[index],\n                onChange: () => handleOnChange(index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: `custom-checkbox-${index}`,\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkboxes, \"lD5tMEqhZXMjPuLoQox6ByPyIUs=\");\n\n_c = Checkboxes;\n\nconst App = () => {\n  _s2();\n\n  const ingridients = ['vodka', 'gin', 'lemon'];\n  const [selectedIngridients, setSelectedIngriedients] = useState([]);\n  let checkedIngridients = [];\n\n  const addIngridient = string => {\n    let newList = selectedIngridients.concat(string);\n    setSelectedIngriedients(newList);\n    console.log('nyt pitais lisata uus', selectedIngridients);\n  };\n\n  const removeIngridient = string => {\n    let index = selectedIngridients.indexOf(string);\n    let newList = selectedIngridients.splice(index, 1);\n    console.log(selectedIngridients, index, newList);\n    setSelectedIngriedients(newList);\n  };\n\n  console.log(selectedIngridients);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Checkboxes, {\n      removeIngridient: removeIngridient,\n      addIngridient: addIngridient,\n      ingridients: ingridients,\n      checkedIngridients: checkedIngridients,\n      selectedIngridients: selectedIngridients,\n      setSelectedIngriedients: setSelectedIngriedients\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Valitut raaka-aineet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), selectedIngridients]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(App, \"4AjWfq0HfWp5JTf4ymWfM45QTn8=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Checkboxes\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/cocktail/src/App.js"],"names":["useState","Checkboxes","removeIngridient","addIngridient","ingridients","checkedIngridients","setSelectedIngriedients","selectedIngridients","checkedState","setCheckedState","Array","length","fill","handleOnChange","position","updatedCheckedState","map","item","index","console","log","App","string","newList","concat","indexOf","splice"],"mappings":"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","sourcesContent":["\nimport './App.css';\nimport { useState } from \"react\";\n\nconst Checkboxes = ({removeIngridient, addIngridient, ingridients, checkedIngridients, setSelectedIngriedients, selectedIngridients}) => {\n\n  const [checkedState, setCheckedState] = useState(\n    new Array(ingridients.length).fill(false)\n  );\n\n  const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n    setCheckedState(updatedCheckedState);\n    console.log(updatedCheckedState[position])\n    if (updatedCheckedState[position] === true) {\n      addIngridient(ingridients[position])\n    }\n    else {\n      removeIngridient(ingridients[position])\n    }\n\n  }\n\n  return (\n    <div>\n      <h3>Select Toppings</h3>\n      <ul>\n        {ingridients.map((item, index) => {\n          return (\n            <li key={index}>\n              <div>\n                <div>\n                  <input\n                    type=\"checkbox\"\n                    id={`custom-checkbox-${index}`}\n                    name={item}\n                    value={item}\n                    checked={checkedState[index]}\n                    onChange={() => handleOnChange(index)}\n                  />\n                  <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n                </div>\n                \n              </div>\n            </li>\n          );\n        })}\n\n      </ul>\n    </div>\n  );\n}\n\n\n\n\nconst App = () => {\n\n  const ingridients = ['vodka', 'gin', 'lemon']\n  const [selectedIngridients, setSelectedIngriedients] = useState([]) \n  let checkedIngridients = []\n\n  const addIngridient = (string) => {\n    let newList = selectedIngridients.concat(string)\n    setSelectedIngriedients(newList)\n    console.log('nyt pitais lisata uus', selectedIngridients)\n  }\n\n  const removeIngridient = (string) => {\n    let index = selectedIngridients.indexOf(string)\n    let newList = selectedIngridients.splice(index,1)\n    console.log(selectedIngridients, index, newList)\n    setSelectedIngriedients(newList)\n  }\n\n  console.log(selectedIngridients)\n  \n\n  return (\n    <div className=\"App\">\n      <Checkboxes removeIngridient={removeIngridient} addIngridient = {addIngridient} ingridients={ingridients} checkedIngridients={checkedIngridients} selectedIngridients= {selectedIngridients} setSelectedIngriedients={setSelectedIngriedients}/>\n      <h2>Valitut raaka-aineet</h2>\n      {selectedIngridients}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}