{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleSubList = _ref => {\n  let {\n    subtype,\n    selectedIngridients,\n    changeSelectedIngridient\n  } = _ref;\n\n  const openList = subtype => {\n    let list = [];\n\n    for (const ing in subtype) {\n      list = list.concat(subtype[ing].name);\n    }\n\n    return list;\n  };\n\n  let list = openList(subtype);\n\n  const findIndex = (subtype, item) => {\n    for (const n in subtype) {\n      if (subtype[n].name === item) {\n        return subtype[n].index;\n      }\n    }\n  };\n\n  const handleSelection = (subtype, item) => {\n    for (const n in subtype) {\n      if (subtype[n].name === item) {\n        const index = subtype[n].index;\n        changeSelectedIngridient(index);\n      }\n    }\n  };\n\n  console.log(selectedIngridients);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: list.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"check-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: `custom-checkbox-${index}`,\n          name: item,\n          value: item,\n          checked: selectedIngridients[findIndex()],\n          onChange: () => handleSelection(subtype, item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `custom-checkbox-${index}`,\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HandleSubList;\n\nconst Checkboxes = _ref2 => {\n  let {\n    ingridients,\n    selectedIngridients,\n    changeSelectedIngridient\n  } = _ref2;\n\n  const createLists = () => {\n    return Object.keys(ingridients).map((type, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-group\",\n        children: [type, /*#__PURE__*/_jsxDEV(HandleSubList, {\n          subtype: ingridients[type],\n          selectedIngridients: selectedIngridients,\n          changeSelectedIngridient: changeSelectedIngridient\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), createLists()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Checkboxes;\nexport default Checkboxes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HandleSubList\");\n$RefreshReg$(_c2, \"Checkboxes\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js"],"names":["HandleSubList","subtype","selectedIngridients","changeSelectedIngridient","openList","list","ing","concat","name","findIndex","item","n","index","handleSelection","console","log","map","Checkboxes","ingridients","createLists","Object","keys","type"],"mappings":"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","sourcesContent":["\nconst HandleSubList = ({subtype, selectedIngridients, changeSelectedIngridient}) => {\n    \n    const openList = (subtype) => {\n        let list = []\n        for (const ing in subtype){\n            list = list.concat(subtype[ing].name)\n        }\n        return list\n    }\n    let list = openList(subtype)\n\n    const findIndex = (subtype, item) => {\n        for (const n in subtype){\n            if (subtype[n].name === item){\n                return subtype[n].index\n            }\n        }\n    }\n\n    const handleSelection = (subtype, item) => {\n        for (const n in subtype){\n            if (subtype[n].name === item){\n                const index = subtype[n].index\n                changeSelectedIngridient(index)\n            }\n        }\n    }\n    console.log(selectedIngridients)\n\n    return(\n        <div>\n            {list.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                      checked={selectedIngridients[findIndex()]}\n                      onChange={() => handleSelection(subtype, item)}\n                      />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            );\n          })}\n\n        </div>\n    )\n}\n\nconst Checkboxes = ({ingridients, selectedIngridients, changeSelectedIngridient}) => {\n\n    const createLists = () =>{\n        return(\n            Object.keys(ingridients).map((type, index) => {\n                return(\n                    <div className = \"checkbox-group\" key = {index}>\n                    {type}\n                    <HandleSubList subtype = {ingridients[type]} selectedIngridients = {selectedIngridients} changeSelectedIngridient = {changeSelectedIngridient}/>\n                    </div>\n            )})\n        )\n    }\n\n    return (\n      <div>\n        <h3>Select Toppings</h3>\n        {createLists()}\n      </div>\n    );\n  }\n\nexport default Checkboxes"]},"metadata":{},"sourceType":"module"}