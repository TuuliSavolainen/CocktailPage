{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/DrinksWithSelectedIng.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FindDrinks = _ref => {\n  let {\n    drinks,\n    ingridients\n  } = _ref;\n  let rightDrinks = [];\n\n  for (let i = 0; i < drinks.length; i++) {\n    let checker = drinks[i].ingridients.every(ing => ingridients.includes(ing));\n\n    if (checker === true) {\n      rightDrinks = rightDrinks.concat(drinks[i]);\n    }\n  } //{rightDrinks.map(drink=> <ShowDrinks key = {drink.name} drink = {drink}/>)}\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this);\n};\n\n_c = FindDrinks;\n\nconst DrinksWithSelectedIng = _ref2 => {\n  let {\n    cocktails,\n    selectedIngridients\n  } = _ref2;\n  let drinkList = [];\n  ingridients;\n\n  const findDrinks = () => {\n    for (let i = 0; i < cocktails.length; i++) {\n      let checker = cocktails[i].ingridients.every(ing => ingridients.includes(ing));\n\n      if (checker === true) {\n        drinkList = drinkList.concat(cocktails[i]);\n      }\n    }\n  };\n\n  findDrinks();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: drinkList.map(item => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 30\n    }, this))\n  }, void 0, false);\n};\n\n_c2 = DrinksWithSelectedIng;\nexport default DrinksWithSelectedIng;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FindDrinks\");\n$RefreshReg$(_c2, \"DrinksWithSelectedIng\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/DrinksWithSelectedIng.js"],"names":["FindDrinks","drinks","ingridients","rightDrinks","i","length","checker","every","ing","includes","concat","DrinksWithSelectedIng","cocktails","selectedIngridients","drinkList","findDrinks","map","item"],"mappings":";;;;AAAA,MAAMA,UAAU,GAAG,QAA2B;AAAA,MAA1B;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAA0B;AAC1C,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACH,MAAM,CAACI,MAAvB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,QAAIE,OAAO,GAAGL,MAAM,CAACG,CAAD,CAAN,CAAUF,WAAV,CAAsBK,KAAtB,CAA4BC,GAAG,IAAEN,WAAW,CAACO,QAAZ,CAAqBD,GAArB,CAAjC,CAAd;;AACA,QAAGF,OAAO,KAAK,IAAf,EAAqB;AACnBH,MAAAA,WAAW,GAAGA,WAAW,CAACO,MAAZ,CAAmBT,MAAM,CAACG,CAAD,CAAzB,CAAd;AACD;AACF,GAPyC,CAQ5C;;;AAEE,sBACE;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAfH;;KAAMJ,U;;AAiBN,MAAMW,qBAAqB,GAAG,SAAsC;AAAA,MAArC;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAAqC;AAChE,MAAIC,SAAS,GAAG,EAAhB;AACAZ,EAAAA,WAAW;;AACX,QAAMa,UAAU,GAAG,MAAM;AACrB,SAAK,IAAIX,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACQ,SAAS,CAACP,MAA1B,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,UAAIE,OAAO,GAAGM,SAAS,CAACR,CAAD,CAAT,CAAaF,WAAb,CAAyBK,KAAzB,CAA+BC,GAAG,IAAEN,WAAW,CAACO,QAAZ,CAAqBD,GAArB,CAApC,CAAd;;AACA,UAAGF,OAAO,KAAK,IAAf,EAAqB;AACnBQ,QAAAA,SAAS,GAAGA,SAAS,CAACJ,MAAV,CAAiBE,SAAS,CAACR,CAAD,CAA1B,CAAZ;AACD;AACF;AACN,GAPD;;AASAW,EAAAA,UAAU;AAEV,sBACI;AAAA,cACCD,SAAS,CAACE,GAAV,CAAcC,IAAI,iBAAE;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAApB;AADD,mBADJ;AAKH,CAnBD;;MAAMN,qB;AAqBN,eAAeA,qBAAf","sourcesContent":["const FindDrinks = ({drinks, ingridients}) => {\n    let rightDrinks = []\n    for (let i=0; i<drinks.length;i++) {\n      let checker = drinks[i].ingridients.every(ing=>ingridients.includes(ing))\n      if(checker === true) {\n        rightDrinks = rightDrinks.concat(drinks[i])\n      }\n    }\n  //{rightDrinks.map(drink=> <ShowDrinks key = {drink.name} drink = {drink}/>)}\n\n    return(\n      < div>\n        </div>\n        \n    )\n  }\n\nconst DrinksWithSelectedIng = ({cocktails, selectedIngridients}) => {\n    let drinkList = []\n    ingridients \n    const findDrinks = () => {\n        for (let i=0; i<cocktails.length;i++) {\n            let checker = cocktails[i].ingridients.every(ing=>ingridients.includes(ing))\n            if(checker === true) {\n              drinkList = drinkList.concat(cocktails[i])\n            }\n          }\n    }\n\n    findDrinks()\n\n    return(\n        <>\n        {drinkList.map(item=><p>{item}</p>)}\n        </>\n    )\n}\n\nexport default DrinksWithSelectedIng"]},"metadata":{},"sourceType":"module"}