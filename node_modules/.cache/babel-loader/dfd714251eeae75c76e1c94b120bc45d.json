{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleSubList = _ref => {\n  let {\n    subtype,\n    lst\n  } = _ref;\n  console.log('taal', lst);\n\n  const openList = subtype => {\n    let list = [];\n    console.log(subtype);\n\n    for (const ing in subtype) {\n      list = list.concat(subtype[ing].name);\n    }\n\n    console.log('pitais nakyy', list);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: list.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 35\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"HALOOOO \", lst.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 38\n    }, this)), openList({\n      subtype\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HandleSubList;\n\nconst Checkboxes = _ref2 => {\n  let {\n    ingridients,\n    selectedIngridients\n  } = _ref2;\n\n  /*const [checkedState, setCheckedState] = useState(\n    new Array(ingridients.length).fill(0).map(ingridientType => {\n      console.log(ingridients, ingridientType)\n      return(new Array(3).fill(false))})\n  );\n  console.log('tsekkaa setit', checkedState)\n  */\n\n  /*const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n    setCheckedState(updatedCheckedState);\n    if (updatedCheckedState[position] === true) {\n      addIngridient(ingridients[position])\n    }\n    else {\n      removeIngridient(ingridients[position])\n    }\n  }\n  */\n\n  /*        {ingridients.map((item, index) => {\n          return (\n            <li key={index} className='check-item'>\n                     <input\n                    type=\"checkbox\"\n                    id={`custom-checkbox-${index}`}\n                    name={item}\n                    value={item}\n                    checked={checkedState[index]}\n                    onChange={() => handleOnChange(index)}\n                  />\n                  <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n      \n            </li>\n          );\n        })} */\n  const createLists = () => {\n    for (const type in ingridients) {\n      const subtype = ingridients[type];\n      return /*#__PURE__*/_jsxDEV(HandleSubList, {\n        subtype: subtype,\n        lst: ['moi']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), createLists()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Checkboxes;\nexport default Checkboxes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HandleSubList\");\n$RefreshReg$(_c2, \"Checkboxes\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js"],"names":["HandleSubList","subtype","lst","console","log","openList","list","ing","concat","name","map","item","Checkboxes","ingridients","selectedIngridients","createLists","type"],"mappings":";;;AACA,MAAMA,aAAa,GAAG,QAAoB;AAAA,MAAnB;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,GAAmB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;;AAEA,QAAMG,QAAQ,GAAIJ,OAAD,IAAa;AAC1B,QAAIK,IAAI,GAAG,EAAX;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;;AACA,SAAK,MAAMM,GAAX,IAAkBN,OAAlB,EAA0B;AACtBK,MAAAA,IAAI,GAAGA,IAAI,CAACE,MAAL,CAAYP,OAAO,CAACM,GAAD,CAAP,CAAaE,IAAzB,CAAP;AACH;;AACDN,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BE,IAA5B;AACA,wBACI;AAAA,gBACKA,IAAI,CAACI,GAAL,CAASC,IAAI,iBAAI;AAAA,kBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,cAAjB;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAZD;;AAcA,sBACI;AAAA,2BACaT,GAAG,CAACQ,GAAJ,CAAQC,IAAI,iBAAI;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,YAAhB,CADb,EAEKN,QAAQ,CAAC;AAACJ,MAAAA;AAAD,KAAD,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAvBD;;KAAMD,a;;AAyBN,MAAMY,UAAU,GAAG,SAAwC;AAAA,MAAvC;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAAuC;;AAGvD;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKI,QAAMC,WAAW,GAAG,MAAK;AAErB,SAAK,MAAMC,IAAX,IAAmBH,WAAnB,EAA+B;AAC3B,YAAMZ,OAAO,GAAGY,WAAW,CAACG,IAAD,CAA3B;AACA,0BACA,QAAC,aAAD;AAAe,QAAA,OAAO,EAAIf,OAA1B;AAAmC,QAAA,GAAG,EAAI,CAAC,KAAD;AAA1C;AAAA;AAAA;AAAA;AAAA,cADA;AAEF;AACL,GAPD;;AASA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGc,WAAW,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA7DH;;MAAMH,U;AA+DN,eAAeA,UAAf","sourcesContent":["\nconst HandleSubList = ({subtype, lst}) => {\n    console.log('taal', lst)\n\n    const openList = (subtype) => {\n        let list = []\n        console.log(subtype)\n        for (const ing in subtype){\n            list = list.concat(subtype[ing].name)\n        }\n        console.log('pitais nakyy', list)            \n        return(\n            <div>\n                {list.map(item => <li>{item}</li>)}\n            </div>\n        )\n    }\n\n    return(\n        <div>\n            HALOOOO {lst.map(item => <li>{item}</li>)}\n            {openList({subtype})}\n        </div>\n    )\n}\n\nconst Checkboxes = ({ingridients, selectedIngridients}) => {\n\n\n    /*const [checkedState, setCheckedState] = useState(\n      new Array(ingridients.length).fill(0).map(ingridientType => {\n        console.log(ingridients, ingridientType)\n        return(new Array(3).fill(false))})\n    );\n    console.log('tsekkaa setit', checkedState)\n    */\n  \n    /*const handleOnChange = (position) => {\n      const updatedCheckedState = checkedState.map((item, index) =>\n        index === position ? !item : item\n      );\n      setCheckedState(updatedCheckedState);\n      if (updatedCheckedState[position] === true) {\n        addIngridient(ingridients[position])\n      }\n      else {\n        removeIngridient(ingridients[position])\n      }\n    }\n    */\n  \n    /*        {ingridients.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                      checked={checkedState[index]}\n                      onChange={() => handleOnChange(index)}\n                    />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            );\n          })} */\n\n\n\n    const createLists = () =>{\n\n        for (const type in ingridients){\n            const subtype = ingridients[type]\n            return(\n            <HandleSubList subtype = {subtype} lst = {['moi']}/>\n        )}  \n    }\n\n    return (\n      <div>\n        <h3>Select Toppings</h3>\n        {createLists()}\n  \n      </div>\n    );\n  }\n\nexport default Checkboxes"]},"metadata":{},"sourceType":"module"}