{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleSubList = _ref => {\n  let {\n    lst\n  } = _ref;\n};\n\n_c = HandleSubList;\n\nconst Checkboxes = _ref2 => {\n  let {\n    ingridients,\n    selectedIngridients\n  } = _ref2;\n\n  /*const [checkedState, setCheckedState] = useState(\n    new Array(ingridients.length).fill(0).map(ingridientType => {\n      console.log(ingridients, ingridientType)\n      return(new Array(3).fill(false))})\n  );\n  console.log('tsekkaa setit', checkedState)\n  */\n\n  /*const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n    setCheckedState(updatedCheckedState);\n    if (updatedCheckedState[position] === true) {\n      addIngridient(ingridients[position])\n    }\n    else {\n      removeIngridient(ingridients[position])\n    }\n  }\n  */\n\n  /*        {ingridients.map((item, index) => {\n          return (\n            <li key={index} className='check-item'>\n                     <input\n                    type=\"checkbox\"\n                    id={`custom-checkbox-${index}`}\n                    name={item}\n                    value={item}\n                    checked={checkedState[index]}\n                    onChange={() => handleOnChange(index)}\n                  />\n                  <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n      \n            </li>\n          );\n        })} */\n  for (const type in ingridients) {\n    let lst = [];\n    console.log(type);\n    const subtype = ingridients[type];\n\n    for (const ing in subtype) {\n      console.log(subtype[ing].name);\n      lst = lst.concat(subtype[ing].name);\n    }\n\n    /*#__PURE__*/\n    _jsxDEV(HandleSubList, {\n      lst: lst\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Checkboxes;\nexport default Checkboxes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HandleSubList\");\n$RefreshReg$(_c2, \"Checkboxes\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js"],"names":["HandleSubList","lst","Checkboxes","ingridients","selectedIngridients","type","console","log","subtype","ing","name","concat"],"mappings":";;;AACA,MAAMA,aAAa,GAAG,QAAW;AAAA,MAAV;AAACC,IAAAA;AAAD,GAAU;AAGhC,CAHD;;KAAMD,a;;AAKN,MAAME,UAAU,GAAG,SAAwC;AAAA,MAAvC;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAAuC;;AAGvD;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGI,OAAK,MAAMC,IAAX,IAAmBF,WAAnB,EAA+B;AAC3B,QAAIF,GAAG,GAAG,EAAV;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAMG,OAAO,GAAGL,WAAW,CAACE,IAAD,CAA3B;;AACA,SAAK,MAAMI,GAAX,IAAkBD,OAAlB,EAA0B;AACtBF,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAD,CAAP,CAAaC,IAAzB;AACAT,MAAAA,GAAG,GAAGA,GAAG,CAACU,MAAJ,CAAWH,OAAO,CAACC,GAAD,CAAP,CAAaC,IAAxB,CAAN;AACH;;AACD;AAAA,YAAC,aAAD;AAAe,MAAA,GAAG,EAAIT;AAAtB;AAAA;AAAA;AAAA;AAAA;AACH;;AAED,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA9DH;;MAAMC,U;AAgEN,eAAeA,UAAf","sourcesContent":["\nconst HandleSubList = ({lst}) => {\n\n    \n}\n\nconst Checkboxes = ({ingridients, selectedIngridients}) => {\n\n\n    /*const [checkedState, setCheckedState] = useState(\n      new Array(ingridients.length).fill(0).map(ingridientType => {\n        console.log(ingridients, ingridientType)\n        return(new Array(3).fill(false))})\n    );\n    console.log('tsekkaa setit', checkedState)\n    */\n  \n    /*const handleOnChange = (position) => {\n      const updatedCheckedState = checkedState.map((item, index) =>\n        index === position ? !item : item\n      );\n      setCheckedState(updatedCheckedState);\n      if (updatedCheckedState[position] === true) {\n        addIngridient(ingridients[position])\n      }\n      else {\n        removeIngridient(ingridients[position])\n      }\n    }\n    */\n  \n    /*        {ingridients.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                      checked={checkedState[index]}\n                      onChange={() => handleOnChange(index)}\n                    />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            );\n          })} */\n\n    for (const type in ingridients){\n        let lst = []\n        console.log(type)\n        const subtype = ingridients[type]\n        for (const ing in subtype){\n            console.log(subtype[ing].name)\n            lst = lst.concat(subtype[ing].name)\n        }\n        <HandleSubList lst = {lst}/>\n    }\n  \n    return (\n      <div>\n        <h3>Select Toppings</h3>\n        \n        \n  \n      </div>\n    );\n  }\n\nexport default Checkboxes"]},"metadata":{},"sourceType":"module"}