{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleSubList = _ref => {\n  let {\n    lst\n  } = _ref;\n  console.log('taal');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: lst.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"check-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: `custom-checkbox-${index}`,\n          name: item,\n          value: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `custom-checkbox-${index}`,\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HandleSubList;\n\nconst Checkboxes = _ref2 => {\n  let {\n    ingridients,\n    selectedIngridients\n  } = _ref2;\n\n  /*const [checkedState, setCheckedState] = useState(\n    new Array(ingridients.length).fill(0).map(ingridientType => {\n      console.log(ingridients, ingridientType)\n      return(new Array(3).fill(false))})\n  );\n  console.log('tsekkaa setit', checkedState)\n  */\n\n  /*const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n    setCheckedState(updatedCheckedState);\n    if (updatedCheckedState[position] === true) {\n      addIngridient(ingridients[position])\n    }\n    else {\n      removeIngridient(ingridients[position])\n    }\n  }\n  */\n\n  /*        {ingridients.map((item, index) => {\n          return (\n            <li key={index} className='check-item'>\n                     <input\n                    type=\"checkbox\"\n                    id={`custom-checkbox-${index}`}\n                    name={item}\n                    value={item}\n                    checked={checkedState[index]}\n                    onChange={() => handleOnChange(index)}\n                  />\n                  <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n      \n            </li>\n          );\n        })} */\n  const createList = () => {\n    for (const type in ingridients) {\n      let lst = [];\n      console.log(type);\n      const subtype = ingridients[type];\n\n      for (const ing in subtype) {\n        console.log(subtype[ing].name);\n        lst = lst.concat(subtype[ing].name);\n      }\n\n      /*#__PURE__*/\n      _jsxDEV(HandleSubList, {\n        lst: lst\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), createList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Checkboxes;\nexport default Checkboxes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HandleSubList\");\n$RefreshReg$(_c2, \"Checkboxes\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js"],"names":["HandleSubList","lst","console","log","map","item","index","Checkboxes","ingridients","selectedIngridients","createList","type","subtype","ing","name","concat"],"mappings":";;;AACA,MAAMA,aAAa,GAAG,QAAW;AAAA,MAAV;AAACC,IAAAA;AAAD,GAAU;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEA,sBACI;AAAA,cACKF,GAAG,CAACG,GAAJ,CAAQ,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1B,0BACE;AAAgB,QAAA,SAAS,EAAC,YAA1B;AAAA,gCAEM;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,EAAE,EAAG,mBAAkBA,KAAM,EAF/B;AAGE,UAAA,IAAI,EAAED,IAHR;AAIE,UAAA,KAAK,EAAEA;AAJT;AAAA;AAAA;AAAA;AAAA,gBAFN,eAQM;AAAO,UAAA,OAAO,EAAG,mBAAkBC,KAAM,EAAzC;AAAA,oBAA6CD;AAA7C;AAAA;AAAA;AAAA;AAAA,gBARN;AAAA,SAASC,KAAT;AAAA;AAAA;AAAA;AAAA,cADF;AAaC,KAdA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CAtBD;;KAAMN,a;;AAwBN,MAAMO,UAAU,GAAG,SAAwC;AAAA,MAAvC;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAAuC;;AAGvD;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGI,QAAMC,UAAU,GAAG,MAAK;AAEpB,SAAK,MAAMC,IAAX,IAAmBH,WAAnB,EAA+B;AAC3B,UAAIP,GAAG,GAAG,EAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACA,YAAMC,OAAO,GAAGJ,WAAW,CAACG,IAAD,CAA3B;;AACA,WAAK,MAAME,GAAX,IAAkBD,OAAlB,EAA0B;AACtBV,QAAAA,OAAO,CAACC,GAAR,CAAYS,OAAO,CAACC,GAAD,CAAP,CAAaC,IAAzB;AACAb,QAAAA,GAAG,GAAGA,GAAG,CAACc,MAAJ,CAAWH,OAAO,CAACC,GAAD,CAAP,CAAaC,IAAxB,CAAN;AACH;;AACD;AAAA,cAAC,aAAD;AAAe,QAAA,GAAG,EAAIb;AAAtB;AAAA;AAAA;AAAA;AAAA;AACH;AACJ,GAZD;;AAaA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGS,UAAU,EAFb;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAjEH;;MAAMH,U;AAmEN,eAAeA,UAAf","sourcesContent":["\nconst HandleSubList = ({lst}) => {\n    console.log('taal')\n\n    return(\n        <div>\n            {lst.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                    />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            )\n            })}\n        </div>\n    )\n}\n\nconst Checkboxes = ({ingridients, selectedIngridients}) => {\n\n\n    /*const [checkedState, setCheckedState] = useState(\n      new Array(ingridients.length).fill(0).map(ingridientType => {\n        console.log(ingridients, ingridientType)\n        return(new Array(3).fill(false))})\n    );\n    console.log('tsekkaa setit', checkedState)\n    */\n  \n    /*const handleOnChange = (position) => {\n      const updatedCheckedState = checkedState.map((item, index) =>\n        index === position ? !item : item\n      );\n      setCheckedState(updatedCheckedState);\n      if (updatedCheckedState[position] === true) {\n        addIngridient(ingridients[position])\n      }\n      else {\n        removeIngridient(ingridients[position])\n      }\n    }\n    */\n  \n    /*        {ingridients.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                      checked={checkedState[index]}\n                      onChange={() => handleOnChange(index)}\n                    />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            );\n          })} */\n\n    const createList = () =>{\n\n        for (const type in ingridients){\n            let lst = []\n            console.log(type)\n            const subtype = ingridients[type]\n            for (const ing in subtype){\n                console.log(subtype[ing].name)\n                lst = lst.concat(subtype[ing].name)\n            }\n            <HandleSubList lst = {lst}/>\n        }\n    }\n    return (\n      <div>\n        <h3>Select Toppings</h3>\n        {createList()}\n        \n        \n  \n      </div>\n    );\n  }\n\nexport default Checkboxes"]},"metadata":{},"sourceType":"module"}