{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/pages/Home.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport image from '../img/home.jpg';\nimport '../styles/styles.css';\nimport '../styles/drink.css';\nimport DrinkOverlay from \"../components/DrinkOverlay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkboxes = _ref => {\n  _s();\n\n  let {\n    removeIngridient,\n    addIngridient,\n    ingridients\n  } = _ref;\n  //const [checkedState, setCheckedState] = useState(\n  //  new Array(ingridients.length).fill(false)\n  //);\n  const [checkedState, setCheckedState] = useState([]);\n  let sublist = [];\n\n  const init = () => {\n    for (const key in ingridients) {\n      const lst = new Array(ingridients[key].length).fill(false);\n      sublist = sublist.concat(lst);\n    }\n\n    setCheckedState(sublist);\n  };\n\n  init();\n  console.log(checkedState);\n  /*const [checkedState, setCheckedState] = useState(\n    new Array(ingridients.length).fill(0).map(ingridientType => {\n      console.log(ingridients, ingridientType)\n      return(new Array(3).fill(false))})\n  );\n  console.log('tsekkaa setit', checkedState)\n  */\n\n  /*const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n    setCheckedState(updatedCheckedState);\n    if (updatedCheckedState[position] === true) {\n      addIngridient(ingridients[position])\n    }\n    else {\n      removeIngridient(ingridients[position])\n    }\n  }\n  */\n\n  /*        {ingridients.map((item, index) => {\n          return (\n            <li key={index} className='check-item'>\n                   <input\n                    type=\"checkbox\"\n                    id={`custom-checkbox-${index}`}\n                    name={item}\n                    value={item}\n                    checked={checkedState[index]}\n                    onChange={() => handleOnChange(index)}\n                  />\n                  <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n      \n            </li>\n          );\n        })} */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkboxes, \"CAsYWldhFbBM48DhWRX4RHkv9/I=\");\n\n_c = Checkboxes;\n\nconst ShowDrinks = _ref2 => {\n  _s2();\n\n  let {\n    drink\n  } = _ref2;\n  const [isActive, setIsActive] = useState(false);\n\n  const handleClick = (event, drink) => {\n    event.preventDefault();\n    setIsActive(!isActive);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"drinkButton drinkCard\",\n      onClick: e => handleClick(e, drink),\n      children: drink.name\n    }, drink.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, this), isActive ? /*#__PURE__*/_jsxDEV(DrinkOverlay, {\n      drink: drink\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 46\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}; // Filters drinks based on the ingridients\n\n\n_s2(ShowDrinks, \"OFRYOMGmWDzfQ4dzLF00ag1mHo0=\");\n\n_c2 = ShowDrinks;\n\nconst FindDrinks = _ref3 => {\n  let {\n    drinks,\n    ingridients\n  } = _ref3;\n  let rightDrinks = [];\n\n  for (let i = 0; i < drinks.length; i++) {\n    let checker = drinks[i].ingridients.every(ing => ingridients.includes(ing));\n\n    if (checker === true) {\n      rightDrinks = rightDrinks.concat(drinks[i]);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: rightDrinks.map(drink => /*#__PURE__*/_jsxDEV(ShowDrinks, {\n      drink: drink\n    }, drink.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 32\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = FindDrinks;\n\nconst Home = _ref4 => {\n  _s3();\n\n  let {\n    cocktails,\n    ingridients\n  } = _ref4;\n\n  /*\n  const drinks = [\n    {\n      \"name\": \"Margharita\",\n      \"type\": \"coctail\",\n      \"gatecory\": \"sweet\",\n      \"ingridients\": [\"tequila\", \"triple sec\",  \"lime juice\", \"lime\"],\n      \"portions\": [\"1 part\", '1/2 part', '1/2 part', '1 widge'],\n      \"instructons\": \"Chill your glass. Put lots of ice and all of the ingredients into a shaker, then shake hard for about 30 seconds to chill the liquid really well Run a lime wedge around the outside of the rim of your glass before rolling the rim in salt Double strain the mix into the glass\",\n    },\n    {\n      \"name\": \"Shotti\",\n      \"type\": \"coctail\",\n      \"gatecory\": \"sweet\",\n      \"ingridients\": [\"tequila\"],\n      \"portions\": [\"1 part\"],\n      \"instructons\": \"Bottoms up\",\n    }\n  ]\n  */\n  //const ingridients = ['tequila', 'lime juice', 'triple sec', 'lime', 'vodka', 'gin', 'lemon', 'wine', 'cider', 'beer', 'ginger']\n  // handling when ingridienst are selected or removed from checkboxes\n  const [selectedIngridients, setSelectedIngriedients] = useState([]);\n  let checkedIngridients = [];\n\n  const addIngridient = string => {\n    let newList = selectedIngridients.concat(string);\n    setSelectedIngriedients(newList);\n  };\n\n  const removeIngridient = string => {\n    let newList = selectedIngridients.filter(i => i !== string);\n    setSelectedIngriedients(newList);\n  };\n\n  console.log(cocktails);\n  console.log(ingridients);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"base\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"intro\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Take a sip and love it\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Just add ingridients, serach and enjoy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Valitut raaka-aineet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n/*\n\n<ul>{selectedIngridients.map((item, index)=><li key = {index}>{item}</li>)}</ul>\n      <h2>Sopivat juomat</h2>\n      <FindDrinks ingridients={selectedIngridients} drinks={cocktails}/>\n*/\n\n\n_s3(Home, \"4AjWfq0HfWp5JTf4ymWfM45QTn8=\");\n\n_c4 = Home;\nexport default Home;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Checkboxes\");\n$RefreshReg$(_c2, \"ShowDrinks\");\n$RefreshReg$(_c3, \"FindDrinks\");\n$RefreshReg$(_c4, \"Home\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/pages/Home.js"],"names":["useState","image","DrinkOverlay","Checkboxes","removeIngridient","addIngridient","ingridients","checkedState","setCheckedState","sublist","init","key","lst","Array","length","fill","concat","console","log","ShowDrinks","drink","isActive","setIsActive","handleClick","event","preventDefault","e","name","FindDrinks","drinks","rightDrinks","i","checker","every","ing","includes","map","Home","cocktails","selectedIngridients","setSelectedIngriedients","checkedIngridients","string","newList","filter"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport image from '../img/home.jpg'\nimport '../styles/styles.css'\nimport '../styles/drink.css'\nimport DrinkOverlay from \"../components/DrinkOverlay\";\n\n\nconst Checkboxes = ({removeIngridient, addIngridient, ingridients}) => {\n\n  //const [checkedState, setCheckedState] = useState(\n  //  new Array(ingridients.length).fill(false)\n  //);\n\n  const [checkedState, setCheckedState] = useState([])\n  let sublist = []\n\n  const init = () => {\n    for (const key in ingridients){\n      const lst = new Array(ingridients[key].length).fill(false)\n      sublist = sublist.concat(lst)\n    }\n    setCheckedState(sublist)\n  }\n  init()\n  console.log(checkedState)\n\n\n  /*const [checkedState, setCheckedState] = useState(\n    new Array(ingridients.length).fill(0).map(ingridientType => {\n      console.log(ingridients, ingridientType)\n      return(new Array(3).fill(false))})\n  );\n  console.log('tsekkaa setit', checkedState)\n  */\n\n  /*const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n    setCheckedState(updatedCheckedState);\n    if (updatedCheckedState[position] === true) {\n      addIngridient(ingridients[position])\n    }\n    else {\n      removeIngridient(ingridients[position])\n    }\n  }\n  */\n\n  /*        {ingridients.map((item, index) => {\n          return (\n            <li key={index} className='check-item'>\n\n                  <input\n                    type=\"checkbox\"\n                    id={`custom-checkbox-${index}`}\n                    name={item}\n                    value={item}\n                    checked={checkedState[index]}\n                    onChange={() => handleOnChange(index)}\n                  />\n                  <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n      \n            </li>\n          );\n        })} */\n\n  return (\n    <div>\n      <h3>Select Toppings</h3>\n      \n\n    </div>\n  );\n}\n\n\nconst ShowDrinks = ({drink}) => {\n  const [isActive, setIsActive] = useState(false)\n  const handleClick = (event, drink) =>{\n    event.preventDefault()\n    setIsActive(!isActive)\n  }\n  return(\n    <div>\n    <button  className = \"drinkButton drinkCard\" key={drink.name} onClick={(e) => handleClick(e, drink)}>{drink.name}</button>\n    {isActive?<DrinkOverlay drink ={drink}/>:<p></p>}\n    </div>\n  )\n}\n\n\n// Filters drinks based on the ingridients\nconst FindDrinks = ({drinks, ingridients}) => {\n  let rightDrinks = []\n  for (let i=0; i<drinks.length;i++) {\n    let checker = drinks[i].ingridients.every(ing=>ingridients.includes(ing))\n    if(checker === true) {\n      rightDrinks = rightDrinks.concat(drinks[i])\n    }\n  }\n\n  return(\n    <div>\n      {rightDrinks.map(drink=> <ShowDrinks key = {drink.name} drink = {drink}/>)}\n    </div>\n  )\n}\n\n\nconst Home = ({cocktails, ingridients}) => {\n  /*\n  const drinks = [\n    {\n      \"name\": \"Margharita\",\n      \"type\": \"coctail\",\n      \"gatecory\": \"sweet\",\n      \"ingridients\": [\"tequila\", \"triple sec\",  \"lime juice\", \"lime\"],\n      \"portions\": [\"1 part\", '1/2 part', '1/2 part', '1 widge'],\n      \"instructons\": \"Chill your glass. Put lots of ice and all of the ingredients into a shaker, then shake hard for about 30 seconds to chill the liquid really well Run a lime wedge around the outside of the rim of your glass before rolling the rim in salt Double strain the mix into the glass\",\n    },\n    {\n      \"name\": \"Shotti\",\n      \"type\": \"coctail\",\n      \"gatecory\": \"sweet\",\n      \"ingridients\": [\"tequila\"],\n      \"portions\": [\"1 part\"],\n      \"instructons\": \"Bottoms up\",\n    }\n  ]\n  */\n  //const ingridients = ['tequila', 'lime juice', 'triple sec', 'lime', 'vodka', 'gin', 'lemon', 'wine', 'cider', 'beer', 'ginger']\n  \n  // handling when ingridienst are selected or removed from checkboxes\n  const [selectedIngridients, setSelectedIngriedients] = useState([]) \n  let checkedIngridients = []\n\n  const addIngridient = (string) => {\n    let newList = selectedIngridients.concat(string)\n    setSelectedIngriedients(newList)\n  }\n\n  const removeIngridient = (string) => {\n    let newList = selectedIngridients.filter(i=> i!==string)\n    setSelectedIngriedients(newList)\n  }\n\n  console.log(cocktails)\n  console.log(ingridients)\n\n\n  return (\n    <div className='base'>\n      <div className='intro'>\n        <div className='image'>\n\n        </div>\n        <h1>Take a sip and love it</h1>\n        <h3>\n          Just add ingridients, serach and enjoy\n        </h3>\n      </div>\n      \n      <h2>Valitut raaka-aineet</h2>\n      \n    </div>\n  );\n}\n\n/*\n\n<ul>{selectedIngridients.map((item, index)=><li key = {index}>{item}</li>)}</ul>\n      <h2>Sopivat juomat</h2>\n      <FindDrinks ingridients={selectedIngridients} drinks={cocktails}/>\n*/\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}