{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleSubList = _ref => {\n  let {\n    subtype\n  } = _ref;\n\n  const openList = subtype => {\n    let list = [];\n\n    for (const ing in subtype) {\n      list = list.concat(subtype[ing].name);\n    }\n\n    return list;\n  };\n\n  let list = openList(subtype);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: list.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"check-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: `custom-checkbox-${index}`,\n          name: item,\n          value: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `custom-checkbox-${index}`,\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HandleSubList;\n\nconst Checkboxes = _ref2 => {\n  let {\n    ingridients,\n    selectedIngridients\n  } = _ref2;\n\n  /*const [checkedState, setCheckedState] = useState(\n    new Array(ingridients.length).fill(0).map(ingridientType => {\n      console.log(ingridients, ingridientType)\n      return(new Array(3).fill(false))})\n  );\n  console.log('tsekkaa setit', checkedState)\n  */\n\n  /*const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n    setCheckedState(updatedCheckedState);\n    if (updatedCheckedState[position] === true) {\n      addIngridient(ingridients[position])\n    }\n    else {\n      removeIngridient(ingridients[position])\n    }\n  }\n  */\n\n  /*        {ingridients.map((item, index) => {\n          return (\n            <li key={index} className='check-item'>\n                     <input\n                    type=\"checkbox\"\n                    id={`custom-checkbox-${index}`}\n                    name={item}\n                    value={item}\n                    checked={checkedState[index]}\n                    onChange={() => handleOnChange(index)}\n                  />\n                  <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n      \n            </li>\n          );\n        })} */\n  const createLists = () => {\n    for (const type in ingridients) {\n      const subtype = ingridients[type];\n      HandleSubList(subtype);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), createLists(), \"Luodaan listat\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Checkboxes;\nexport default Checkboxes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HandleSubList\");\n$RefreshReg$(_c2, \"Checkboxes\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js"],"names":["HandleSubList","subtype","openList","list","ing","concat","name","map","item","index","Checkboxes","ingridients","selectedIngridients","createLists","type"],"mappings":";;;AACA,MAAMA,aAAa,GAAG,QAAe;AAAA,MAAd;AAACC,IAAAA;AAAD,GAAc;;AAEjC,QAAMC,QAAQ,GAAID,OAAD,IAAa;AAC1B,QAAIE,IAAI,GAAG,EAAX;;AACA,SAAK,MAAMC,GAAX,IAAkBH,OAAlB,EAA0B;AACtBE,MAAAA,IAAI,GAAGA,IAAI,CAACE,MAAL,CAAYJ,OAAO,CAACG,GAAD,CAAP,CAAaE,IAAzB,CAAP;AACH;;AACD,WAAOH,IAAP;AACH,GAND;;AAQA,MAAIA,IAAI,GAAGD,QAAQ,CAACD,OAAD,CAAnB;AAEA,sBACI;AAAA,cACKE,IAAI,CAACI,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3B,0BACE;AAAgB,QAAA,SAAS,EAAC,YAA1B;AAAA,gCAEM;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,EAAE,EAAG,mBAAkBA,KAAM,EAF/B;AAGE,UAAA,IAAI,EAAED,IAHR;AAIE,UAAA,KAAK,EAAEA;AAJT;AAAA;AAAA;AAAA;AAAA,gBAFN,eAQM;AAAO,UAAA,OAAO,EAAG,mBAAkBC,KAAM,EAAzC;AAAA,oBAA6CD;AAA7C;AAAA;AAAA;AAAA;AAAA,gBARN;AAAA,SAASC,KAAT;AAAA;AAAA;AAAA;AAAA,cADF;AAaD,KAdE;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAhCD;;KAAMT,a;;AAkCN,MAAMU,UAAU,GAAG,SAAwC;AAAA,MAAvC;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAAuC;;AAGvD;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKI,QAAMC,WAAW,GAAG,MAAK;AAErB,SAAK,MAAMC,IAAX,IAAmBH,WAAnB,EAA+B;AAC3B,YAAMV,OAAO,GAAGU,WAAW,CAACG,IAAD,CAA3B;AAEAd,MAAAA,aAAa,CAACC,OAAD,CAAb;AACH;AACJ,GAPD;;AASA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGY,WAAW,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA9DH;;MAAMH,U;AAgEN,eAAeA,UAAf","sourcesContent":["\nconst HandleSubList = ({subtype}) => {\n    \n    const openList = (subtype) => {\n        let list = []\n        for (const ing in subtype){\n            list = list.concat(subtype[ing].name)\n        }\n        return list\n    }\n    \n    let list = openList(subtype)\n\n    return(\n        <div>\n            {list.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                      />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            );\n          })}\n\n        </div>\n    )\n}\n\nconst Checkboxes = ({ingridients, selectedIngridients}) => {\n\n\n    /*const [checkedState, setCheckedState] = useState(\n      new Array(ingridients.length).fill(0).map(ingridientType => {\n        console.log(ingridients, ingridientType)\n        return(new Array(3).fill(false))})\n    );\n    console.log('tsekkaa setit', checkedState)\n    */\n  \n    /*const handleOnChange = (position) => {\n      const updatedCheckedState = checkedState.map((item, index) =>\n        index === position ? !item : item\n      );\n      setCheckedState(updatedCheckedState);\n      if (updatedCheckedState[position] === true) {\n        addIngridient(ingridients[position])\n      }\n      else {\n        removeIngridient(ingridients[position])\n      }\n    }\n    */\n  \n    /*        {ingridients.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                      checked={checkedState[index]}\n                      onChange={() => handleOnChange(index)}\n                    />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            );\n          })} */\n\n\n\n    const createLists = () =>{\n\n        for (const type in ingridients){\n            const subtype = ingridients[type]\n            \n            HandleSubList(subtype)\n        }  \n    }\n\n    return (\n      <div>\n        <h3>Select Toppings</h3>\n        {createLists()}\n        Luodaan listat\n  \n      </div>\n    );\n  }\n\nexport default Checkboxes"]},"metadata":{},"sourceType":"module"}