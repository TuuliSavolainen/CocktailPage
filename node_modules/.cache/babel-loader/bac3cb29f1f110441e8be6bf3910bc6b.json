{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleSubList = _ref => {\n  let {\n    lst\n  } = _ref;\n  console.log('taal', lst);\n\n  const openList = subtype => {\n    let lst = [];\n\n    for (const ing in subtype) {\n      lst = lst.concat(subtype[ing].name);\n    }\n\n    console.log('pitais nakyy', lst);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: lst.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"HALOOOO \", lst.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 38\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HandleSubList;\n\nconst Checkboxes = _ref2 => {\n  let {\n    ingridients,\n    selectedIngridients\n  } = _ref2;\n\n  /*const [checkedState, setCheckedState] = useState(\n    new Array(ingridients.length).fill(0).map(ingridientType => {\n      console.log(ingridients, ingridientType)\n      return(new Array(3).fill(false))})\n  );\n  console.log('tsekkaa setit', checkedState)\n  */\n\n  /*const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n    setCheckedState(updatedCheckedState);\n    if (updatedCheckedState[position] === true) {\n      addIngridient(ingridients[position])\n    }\n    else {\n      removeIngridient(ingridients[position])\n    }\n  }\n  */\n\n  /*        {ingridients.map((item, index) => {\n          return (\n            <li key={index} className='check-item'>\n                     <input\n                    type=\"checkbox\"\n                    id={`custom-checkbox-${index}`}\n                    name={item}\n                    value={item}\n                    checked={checkedState[index]}\n                    onChange={() => handleOnChange(index)}\n                  />\n                  <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n      \n            </li>\n          );\n        })} */\n  const createLists = () => {\n    for (const type in ingridients) {\n      let lst = [];\n      const subtype = ingridients[type];\n      return /*#__PURE__*/_jsxDEV(HandleSubList, {\n        subtype: subtype,\n        lst: ['moi']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), createLists()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Checkboxes;\nexport default Checkboxes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HandleSubList\");\n$RefreshReg$(_c2, \"Checkboxes\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js"],"names":["HandleSubList","lst","console","log","openList","subtype","ing","concat","name","map","item","Checkboxes","ingridients","selectedIngridients","createLists","type"],"mappings":";;;AACA,MAAMA,aAAa,GAAG,QAAW;AAAA,MAAV;AAACC,IAAAA;AAAD,GAAU;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;;AACA,QAAMG,QAAQ,GAAIC,OAAD,IAAa;AAC1B,QAAIJ,GAAG,GAAG,EAAV;;AACA,SAAK,MAAMK,GAAX,IAAkBD,OAAlB,EAA0B;AACtBJ,MAAAA,GAAG,GAAGA,GAAG,CAACM,MAAJ,CAAWF,OAAO,CAACC,GAAD,CAAP,CAAaE,IAAxB,CAAN;AACH;;AACDN,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACA,wBACI;AAAA,gBACCA,GAAG,CAACQ,GAAJ,CAAQC,IAAI,iBAAI;AAAA,kBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,cAAhB;AADD;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAXD;;AAaA,sBACI;AAAA,2BACaT,GAAG,CAACQ,GAAJ,CAAQC,IAAI,iBAAI;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,YAAhB,CADb;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CApBD;;KAAMV,a;;AAsBN,MAAMW,UAAU,GAAG,SAAwC;AAAA,MAAvC;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAAuC;;AAGvD;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKI,QAAMC,WAAW,GAAG,MAAK;AACrB,SAAK,MAAMC,IAAX,IAAmBH,WAAnB,EAA+B;AAC3B,UAAIX,GAAG,GAAG,EAAV;AACA,YAAMI,OAAO,GAAGO,WAAW,CAACG,IAAD,CAA3B;AAGA,0BACA,QAAC,aAAD;AAAe,QAAA,OAAO,EAAIV,OAA1B;AAAmC,QAAA,GAAG,EAAI,CAAC,KAAD;AAA1C;AAAA;AAAA;AAAA;AAAA,cADA;AAIH;AAEJ,GAZD;;AAaA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGS,WAAW,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CApEH;;MAAMH,U;AAsEN,eAAeA,UAAf","sourcesContent":["\nconst HandleSubList = ({lst}) => {\n    console.log('taal', lst)\n    const openList = (subtype) => {\n        let lst = []\n        for (const ing in subtype){\n            lst = lst.concat(subtype[ing].name)\n        }\n        console.log('pitais nakyy', lst)            \n        return(\n            <div>\n            {lst.map(item => <li>{item}</li>)}\n            </div>\n        )\n    }\n\n    return(\n        <p>\n            HALOOOO {lst.map(item => <li>{item}</li>)}\n        </p>\n    )\n}\n\nconst Checkboxes = ({ingridients, selectedIngridients}) => {\n\n\n    /*const [checkedState, setCheckedState] = useState(\n      new Array(ingridients.length).fill(0).map(ingridientType => {\n        console.log(ingridients, ingridientType)\n        return(new Array(3).fill(false))})\n    );\n    console.log('tsekkaa setit', checkedState)\n    */\n  \n    /*const handleOnChange = (position) => {\n      const updatedCheckedState = checkedState.map((item, index) =>\n        index === position ? !item : item\n      );\n      setCheckedState(updatedCheckedState);\n      if (updatedCheckedState[position] === true) {\n        addIngridient(ingridients[position])\n      }\n      else {\n        removeIngridient(ingridients[position])\n      }\n    }\n    */\n  \n    /*        {ingridients.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                      checked={checkedState[index]}\n                      onChange={() => handleOnChange(index)}\n                    />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            );\n          })} */\n\n\n\n    const createLists = () =>{\n        for (const type in ingridients){\n            let lst = []\n            const subtype = ingridients[type]\n            \n\n            return(\n            <HandleSubList subtype = {subtype} lst = {['moi']}/>\n        )\n            \n        }\n        \n    }\n    return (\n      <div>\n        <h3>Select Toppings</h3>\n        {createLists()}\n\n        \n        \n  \n      </div>\n    );\n  }\n\nexport default Checkboxes"]},"metadata":{},"sourceType":"module"}