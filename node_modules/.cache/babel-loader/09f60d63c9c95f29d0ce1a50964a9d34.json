{"ast":null,"code":"var _jsxFileName = \"/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js\";\nimport '../styles/styles.css';\nimport '../styles/drink.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HandleSubList = _ref => {\n  let {\n    subtype,\n    selectedIngridients,\n    changeSelectedIngridient\n  } = _ref;\n\n  const openList = subtype => {\n    let list = [];\n\n    for (const ing in subtype) {\n      list = list.concat(subtype[ing].name);\n    }\n\n    return list;\n  };\n\n  let list = openList(subtype);\n\n  const findIndex = (subtype, item) => {\n    for (const n in subtype) {\n      if (subtype[n].name === item) {\n        return subtype[n].index;\n      }\n    }\n  };\n\n  const handleSelection = (subtype, item) => {\n    for (const n in subtype) {\n      if (subtype[n].name === item) {\n        const index = subtype[n].index;\n        changeSelectedIngridient(index, item);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chechkbox-group\",\n    children: list.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"check-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: `custom-checkbox-${index}`,\n          name: item,\n          value: item,\n          checked: selectedIngridients[findIndex()],\n          onChange: () => handleSelection(subtype, item)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `custom-checkbox-${index}`,\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HandleSubList;\n\nconst Checkboxes = _ref2 => {\n  let {\n    ingridients,\n    selectedIngridients,\n    changeSelectedIngridient\n  } = _ref2;\n\n  const createLists = () => {\n    return Object.keys(ingridients).map((type, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkboxes-type\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"type-header\",\n            children: type.toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(HandleSubList, {\n            subtype: ingridients[type],\n            selectedIngridients: selectedIngridients,\n            changeSelectedIngridient: changeSelectedIngridient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)\n      }, void 0, false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"checkboxes\",\n      children: createLists()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Checkboxes;\nexport default Checkboxes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HandleSubList\");\n$RefreshReg$(_c2, \"Checkboxes\");","map":{"version":3,"sources":["/Users/tuulisavolainen/Documents/Cocktail/CocktailPage/src/components/Checkboxes.js"],"names":["HandleSubList","subtype","selectedIngridients","changeSelectedIngridient","openList","list","ing","concat","name","findIndex","item","n","index","handleSelection","map","Checkboxes","ingridients","createLists","Object","keys","type","toUpperCase"],"mappings":"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","sourcesContent":["import '../styles/styles.css'\nimport '../styles/drink.css'\nconst HandleSubList = ({subtype, selectedIngridients, changeSelectedIngridient}) => {\n    \n    const openList = (subtype) => {\n        let list = []\n        for (const ing in subtype){\n            list = list.concat(subtype[ing].name)\n        }\n        return list\n    }\n    let list = openList(subtype)\n\n    const findIndex = (subtype, item) => {\n        for (const n in subtype){\n            if (subtype[n].name === item){\n                return subtype[n].index\n            }\n        }\n    }\n\n    const handleSelection = (subtype, item) => {\n        for (const n in subtype){\n            if (subtype[n].name === item){\n                const index = subtype[n].index\n                changeSelectedIngridient(index, item)\n            }\n        }\n    }\n\n    return(\n        <div className='chechkbox-group'>\n            {list.map((item, index) => {\n            return (\n              <li key={index} className='check-item'>\n  \n                    <input\n                        key = {index}\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={item}\n                      value={item}\n                      checked={selectedIngridients[findIndex()]}\n                      onChange={() => handleSelection(subtype, item)}\n                      />\n                    <label htmlFor={`custom-checkbox-${index}`}>{item}</label>\n        \n              </li>\n            );\n          })}\n\n        </div>\n    )\n}\n\n\nconst Checkboxes = ({ingridients, selectedIngridients, changeSelectedIngridient}) => {\n\n    const createLists = () =>{\n        return(\n            Object.keys(ingridients).map((type, index) => {\n                return(\n                    <>\n                        <div className = \"checkboxes-type\" key = {index}>\n                            <span className='type-header'>{type.toUpperCase()}</span>\n                            \n                            <HandleSubList subtype = {ingridients[type]} selectedIngridients = {selectedIngridients} changeSelectedIngridient = {changeSelectedIngridient}/>\n                        </div>\n                    </>\n            )})\n        )\n    }\n\n    return (\n      <div>\n        <h3></h3>\n        <div className = \"checkboxes\">\n            {createLists()}\n        </div>\n      </div>\n    );\n  }\n\nexport default Checkboxes"]},"metadata":{},"sourceType":"module"}